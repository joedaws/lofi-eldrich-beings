#+title: Notes
* Planning

I need to have a concept of a user so that each user can upload their own
flashcards and only fetch their own flash cards.

I want the initial UI to be built in an application called
lofi-eldritch-cosmos-cli which will be a cli written
in Haskell to

Somethings to read an understand are
- [[https://stackoverflow.com/questions/39302350/building-blocks-of-interactive-terminal-applications][textual user interface]]
- [[https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/][ncurses]] bindings for Haskell
- [[https://en.wikipedia.org/wiki/Leitner_system][leitner system]]

The next chunk of functionality is to use the lofi api
interface to
- create being with incantation
  (/being POST)
- client fetches beings with incantations ready to be reinforced
  (/being GET with correct parameters)
- client inputs the "back" of the incantation and it is checked
  if correct then (inspired by [[https://en.wikipedia.org/wiki/Spaced_repetition][spaced repetition]])
  - being gets increased ichor
  - that incantation gets upgraded to the next level (box in the leitner system)
  if incorrect then
  - no change to ichor
  - that incantation gets downgraded to the next level (unless at lowest level)
  (/being POST with correct input)

* Product
** Spaced Repetition
In this version of the application, the beings help the user learn
using techniques of spaced repetition. The user creates a new being
through a UI. This being is holds a core piece of knowledge that will
be reinforced with spaced repetition.

*** Knowledge recording mode
User creates beings instilled with the knowledge they want to recall
at certain intervals. They can choose the interval (should be mutable by user).
This is freeform text creation.

*** Knowledge pack mode
User can select from an existing stock pile of beings.
**** Math Packs
- basic calculus rules
- multiplication tables

**** Vocabulary Packs
- different level words

*** Knowledge web mode
While not in use, the beings they create occasionally interact with each other.
During this interaction they can decide to build a bond or not. Sometimes this
will be interesting because different topics will start interacting. Users
can confirm these associations.

*** Flash card mode
In this mode the beings store information and they themselves act as
"cards" which are stacked into a deck. The user can also choose
to use multiple choice mode. Where the

*** Relax mode
In relax mode, a relaxing scene of a studying researcher reading
an ancient eldritch tome is shown. Every interval, a being is summoned

** Beings
*** Portrait
Each being has a =png= portrait (probably pixel art for now).

*** Incantation
This is the bit of information that the user inputs as a string that will be
recalled during the interval. There are two types of incantations
**** Declarative Incancation
This corresponds to a one sided flash card. The purpose is to remind you of something

**** Flash Incancation
This corresponds to a two sided flash card. The purpose on the front is to
prime your memory to recall the details on the back.

*** Interval
How often the user wants the information to be resurfaced.

*** Ichor
This is a number which represents the life force of a being.
It grows the number of times that you get retrieve the information.
It grows even faster when you use flashcard mode

** Systems

* Technologies
** Architecture
*** Problems
- How can I keep different user's data separate?
** Start up
To start the application what is required.

Need to load the existing beings from the database.
Need to start the relevant systems

What scripts are run during start up?
** Backends
Below we list some back ends to consider using to power the application.

I want it to be free at first.
*** AWS Backend
Can use a combination of backend services from AWS.

*** Supabase
This might be awesome since it includes auth
